I want to calculate the constant e to one trillion digits.
To do that, I plan on having multiple computers working together in order to solve the problem.
Comp#1: You sum up the term #193220 to #203230949
...
Comp#k: Compile the results from these computers, and give me a decimal expansion.
..

To do that, I assume we need a hierarchy of director computers, to determine which tasks
to divide between which computers. We should also have a director of directors.
Also, if a director goes offline, the group of computers it used to direct should
decide which one of themselves will be the new director.

Oh, we should divide our computers into groups, each one with one director.




#####

Using the Lagrange error bound, we get
R_n(x) = f^(n+1)(c)/(n+1)! * (x-a)^(n+1), for a is the center, for c between x and a. n is the nth taylor polynomial.
Now, we let f(x)=e^x,  x=1, and a=0. Thus,
R_n(1) = e^c/(n+1)! <= e/(n+1)!
We want our error R to be R<= 10^(-10^12), so
e/(n+1)! <= 10^(-10^12)
\implies
e * 10^trillion <= (n+1)!

If we solve that inequality, we obtain the number n of terms.


We might want to have multiple computers work together in order to compute the factorials.
Also, we might want to save the factorials somewhere in the network (at multiple places,
in case one or more computers go offline) so that we will not have to recalculate it.

The network should be such that if a node goes offline, the network should not be severely affected.
And that if a node goes online, she is immediately assigned a group and a task to work with.

RESOURCES SHOULD NOT BE LEFT IDLE



Also, a computer should be able to work offline. Even if it works on the same problem as another computer online,
that is good because it means the result is doubly verified.

A computer shoud work offline, save the results locally, and send them on the network once it goes back online.


#####
Here is the formula we will use in order to compute e:
e = 1/n! * \sum_{k=0}^n \prod_{h=k+1}^n

Now, we should divide this into small tasks. Then we would write onto disk the partial results of
multiplications in files of size 4MiB - 8MiB. We do this in order to not use all of RAM.
Now, we will keep the partial sum of the terms on disk as well. We will have to split it up into
several files. We should indicate somewhere the number of terms added.

So regarding the partition of tasks: 4MiB-8MiB files which contain for example: productory from 2240992 to 23093009329.
The important thing is that the file is in the range 4-8MiB.

The program should also return where it left off in the event that the OS requests to end it.
