OVERVIEW

I want to calculate the constant e to one trillion digits. To do that, I plan on
having multiple computers working together in order to solve the problem.

1: Algorithms

1.1: Taylor Series

Here is the formula to compute the digits:
e = \sum_{k=0}^n 1/k!
  = 1/n! * \sum_{k=0}^n n! / k!
  = 1/n! * \sum_{k=0}^n \prod_{h=k+1}^n h

*This is wrong. Try looking at the terms more concretely.

1.2: Lagrange Error Bound

Using the Lagrange error bound, we get

R_n(x) = f^(n+1)(c)/(n+1)! * (x-a)^(n+1),

where a is the center, c is between x and a, and n is the n-th taylor
polynomial. Now, we let f(x)=e^x,  x=1, and a=0. Thus,

R_n(1) = e^c/(n+1)! <= e/(n+1)!

We want our error R to be R < 10^(-D), where D is the number of desired digits.
Thus, we get

e/(n+1)! < 10^(-D),

which implies that

e * 10^D < (n+1)!,

which itself implies

1 + D * ln(10) < \sum_{k=1}^{n+1} ln(k)

Now, in the summatory in the right side, it's never bad to force the system to
compute one extra term, so we let m = n + 1, and replace n with m. Hence,

1 + D * ln(10) < \sum_{k=0}^n ln(k).

If we solve that inequality, we obtain the number n of terms. We need to write
a program which solves that inequality. Moreover, if the user wants D decimal
digits, we won't plug D directly into our program. Instead, we want to
overestimate D by a sufficient amount, like 32 digits.

Suppose that in our digits, there is a long stretch of 9's, but if we had just
added one more term, all those 9's would carry over, producing a long stretch
of 0's. That is catastrophic! That means that our digits (the ones with the
long stretch of 9's) would be inaccurate. In order to minimize the chances of
a situation like that, we plug D + 32 into our function. The only way that the
above scenario can occur is if there is a (highly unlikely) stretch of
thirty-two 9's.

1.2 Number of Required Terms

We want to solve for the smallest integer which satisfies

1 + D * ln(10) < \sum_{k=1)^n ln(k).

Consider the following inequality:

ceil(1 + D * ln(10)) < \sum_{k=1}^m floor(ln(k)).

Then, m < n, since a larger number of terms would need to be summed. This
inequality can be solved easily, rapidly, and precisely by using a big integer
library. Once we solve it, we obtain m, which is an upper bound for n.

Now, a double precision floating point has a 52-bit mantissa. The mantissa of
the output of the log function in the C math library depends on the size of the
integer part of the output. For example,

log(10^11) = 11 * log(10) = 25.328436... < 26 = 0b11010,

which has 5 bits, so there are 52 - 5 = 48 bits left for the fractional part.
That means that the error R satisfies R < 2^(-48).

So once we find m, we find B = ceil(log2(m)), which will be the bitcount for
the integer part of m, and we assume that each term in the first inequality has
error 2^(B-52). Multiply by the amount of terms, and we obtain R = m * 2^(B-52).
Notice that this is more than the actual error, which is good; we want to
overestimate the error.

Now, it should be pointed out that when D = 10^12, which accounts for the first
trillion decimal digits of e, m is less than 10^11. If we let m = 10^11, then we
get log(10^11) < 26 = 0b11010, as we saw earlier. Then, we just repeat the same
procedure and we get R < 10^11 * 2^(-48) = 10^(-4) * 3.5527..., which means that
the error of the summatory in the first inequality is negligible.

If we are really worried about error, it suffices to just apply the floor of the
whole summatory to force it to add more terms according to the error. Moreover,
since the logarithm grows very slowly, it will take a LONG time for the error
for each individual term to grow larger than just a fractional part. Thus, just
taking the ceiling of the entire summatory suffices for all practical purposes
(say, for computing the first QUINTILLION digits of e). So in the end, the
equation we really care about is the following:

ceil(1 + D * ln(10)) < floor(\sum_{k=1}^n ln(k)).

1.3: Main Loop

Our program will have two main parts. The first part is to compute a rational
number which approximates exp(1) to the desired number of digits. The second
part will compute another rational number which will approximate exp(-1).
Finally, it will compare the digits of both; if the digits are all the same, we
have success. Else, we have to go back to the planning board.

For each of the two parts, our program will first compute a numerator, then a
denominator, and finally, it will divide these two integers to obtain the
digits. In order to compute the numerator for the exp(1) part, assuming that n
is the required number of terms, the pseudocode is as follows:

int getNumerator(int n)
{
	int sum = 0;
	int product = 1;

	for(int i = 0; i < n; i++)
	{
		for(int j = n; j >= n - i; j++)
		{
			product *= j;
		}

		sum += product;
	}

	sum += 1 + n!;

	return sum;
}

This code is absolutely correct; double check it, if you don't trust me.

Now, let's analyze the code. In the loops, we're essentially computing this:
(n) +
(n)(n-1) +
(n)(n-1)(n-2) +
... +
(n)(n-1)(n-2)...(3) +
(n)(n-1)(n-2)...(3)(2) +
(n)(n-1)(n-2)...(3)(2)(1)

So we need to define a function prod(int a, int b) which takes arguments a < b,
and is defined as follows:

int prod(int a, int b)
{
	int product = 1;

	for(int i = a; i <= b; i++)
	{
		product *= i;
	}

	return product;
}

Back to our getNumerator function, notice that as the loop progresses, we have
to multiply bigger and bigger numbers. I intentionally made it so that the easy
computations are the ones which get done first, so that as the loop progresses,
we get closer and closer to the factorial of n.

Actually, we don't have to sum these terms in order; we can just declare a task
which consists of adding a given term (or several of them) to the main
numerator file.

1.4: Arithmetic on Integers Saved throughout Multiple Files

We will divide up our integers into files of exactly 4KiB (the most
significant bits will be filled with zeros as needed). For each file, we can
copy it from storage to RAM for use. We will only work on one file at a time to
ensure that we don't blow up RAM. For each file, we will create an MPZ object
to work with.

In order to refer to an integer partitioned into several files, we will create
a plain text file, called an index, which will contain the number of files
associated with the integer, the name for each file (which will just be the
hash of the contents), and the hash of the concatenation of all the filenames
excluding the index, in order to verify that all files are intact. Finally,
all these files should exist in a common folder: one for each integer.

Now, the integer data will be stored in data blobs. It is up to the system to
interpret what each blob represents, and determine what to do with each blob.

1.4.1: Addition

1.4.2: Multiplication

Multiplication is just addition with bitshifting. Example:

A * 1101 = A * 1000 + A * 100 + A * 1;

We will implement multiplication in two ways: The Addition way, and the Lattice
way. Whichever way is faster is the one that we will use.

2: Parallelization

It would be advantageous to have a parallel system which can perform multiple
things at the same time, rather than a purely sequential system which only
performs one task at a time.

KEYWORD: task.

We want to find a way to break our work into small tasks which can be assigned
to various nodes in a Beowulf cluster. We need to find a way to parallelize our
program.

*The slaves should confirm to the master that they accepted the tasks assigned
to them
*The Master is the one that determines which tasks are necessary
*He should also determine which tasks depend on which other tasks

2.1: The Master and His Slaves

3: System Management

3.1: Master Files

The Master node is tasked with updating several files.

3.1.1: Status File

We want a file, called the status file, which will be readable by the user.
It should contain information essential to the system, like the number of nodes
in the network, the progress in the various phases of the computation of
digits, etc. It should be concise and precise.

3.1.2: Global Task Queue File

This file lists all the tasks declared by the Master, whether a task has been
assigned, whether a task was completed, who completed or verified a task in
what time, etc, which files and folders are required by which task, and which
files and folders are produced by which task. This file will be used by the
master in order to make decisions about assigning tasks.

3.1.3: Node Status File

For every node in the network, the Master should ensure every so often (say,
every 10 minutes) that the node is responsive and active. The Master keeps
track of that in this file. Every node has an entry, and the entry says when
the responsiveness of the node was checked by the Master. This will help us
determine if a node crashes, freezes, or goes offline.

3.1.4: Log File

This is the general log file.

*This is where errors are reported.

3.2: Slave Files

3.2.1: Slave Task Queue File

3.2.2: Slave Log File

A: Appendix

A.1: Ideas

Comp#1: You sum up the term #193220 to #203230949
...
Comp#k: Compile the results from these computers, and give me a decimal
expansion.
..

To do that, I assume we need a hierarchy of director computers, to determine
which tasks to divide between which computers. We should also have a director of
directors. Also, if a director goes offline, the group of computers it used to
direct should decide which one of themselves will be the new director.

Oh, we should divide our computers into groups, each one with one director.

I don't wanna do this across the Internet, since there are security risk
associated with data transmission. I don't wanna mess up my friends' computers.
What I wanna do is to use a local network of computers.

If I really wanna do this across the Internet, I need to learn more about
Internet security.

A.2: Ideas

The Task Manager should take into account the Latency and the Bandwidth between the Master and each Slave.
If the connection is slow, then it assigns MORE tasks to the slave. That way, the slave spends less time
communicating with the Master.
If the connection is fast, then less tasks are assigned to the slave, since it wouldn't be much of a setback to
comunicate with the master, so the slave can be reassigned work very quickly should the need arise.
Note that we only care about the RELATIVE speed (Ah, this node is slower than the rest, or this one is faster than the rest)
and NOT the absolute speed.
Actually, absolute speed should also be coonsidered. If each and every connection is slow, then each
node would need to be more autonomous.

In order for the master to assess the speed of a connection, he can send a small packet of data to the slave,
and the slave would immediately respond. That way, the master can assess the connection spped.

Moreover, each Slave should immediately accept an order from the master for cancelation of an impending task,
and also a task which is already running.

Also, when the slave outputs to the log file that it completed a task, he should also indicate the time it took him
to complete that task. That way, the Master can assess its average speed. The slave will indicate
the time of starting the task, and the time of completing the task.
This is also a way for us to assess (at the end of all the computations) how much time was spent doing what.

Also, the slave should indicate if the task failed.

In the case where the Master looses connection with a slave, or a slave does not respond within a reasonable period of time,
say one or two minutes, the Master should see if he is ok. THe master should request the slave to recite all of his
impending tasks. If he forgot them, well, he forgot them, and the master reassigns the lost tasks to other nodes.
This means that every so often, the slaves should indicate to the master that everything is ok for them, say
every 10, 30, 60 minutes or something.

If a slave goes offline temporarily, he should continue working on the taskks appointed to him. Every node should be appointed
lots of tasks to do in the case that they go offline and they finish their immediate tasks. So we have the
present tasks queue, and the offline tasks queue. When the slave goes back online, he should report to the master everything
he did (if he did anything at all). If the master finds that the slave did all his present tasks and several of the offline tasks,
great! If the slave crashed and forgot all his tasks, that means that the master will now begin to distribute all the tasks appointed to him
to other nodes, and perform a system check on the node. If the system is alright, then assign him new tasks. If not, put that in
the status file.
The offline queues for each node should be updated every so often, based on whether they are completed.
Each node should have a MINIMUM number of offline tasks, but not necessarily a maximum.

If a slave goes offline, and the master immediately needs one of the tasks appointed to the slave to be completed,
then the master will reassign the needed tasks to other online computers, regardless of whether or not the slabve
is currently working on it while offline.

If the offline slave comes back online with his task completed, but other online slaves already did it, great! that serves as
a confirmation.
IF two nodes perform the same task, they should compare their results. If their results match, put it in the log file.
If the results DONT match, put it in the log file, and also write it in the status file.

Keep a track record of online-offlinings for each slave to assess their reliability.
